import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
//    id 'androidx.navigation.safeargs'
}

apply plugin: 'AndResGuard'

android {
    compileSdk 32
    buildToolsVersion '33.0.0'
    ndkVersion '25.0.8775105'

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

    externalNativeBuild {
        cmake {
//            path 'jni/CMakeLists.txt'
        }
    }

    dexOptions {
        jumboMode = true
    }

    defaultConfig {
        applicationId "ir.blockify"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0.0"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        validateVersionName(versionName)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                version '3.22.1'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16', "-j=16"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            jniDebuggable true
            multiDexEnabled true
            debuggable true

            ndk.debugSymbolLevel = 'FULL'

            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {
            debuggable true
            jniDebuggable true
//            signingConfig true
            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            ndk.debugSymbolLevel = 'FULL'

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
//        coreLibraryDesugaringEnabled true
    }

    lint {
        abortOnError false
        disable 'VectorPath', 'NestedWeights', 'ContentDescription', 'SmallSp'
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '26'
        }
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        viewBinding true
        dataBinding true
    }

    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }

    androidResources {
        additionalParameters.add("--warn-manifest-validation")
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)

            if (variant.buildType.name == "debug")
                outputFileName = new File("blockify_debug_" + (abi ? abi : "universal") + ".apk")

            else if (variant.buildType.name == "release")
                outputFileName = new File("blockify_release_" + (abi ? abi : "universal") + ".apk")

        }
    }

    project.gradle.addBuildListener(new BuildListener() {
        @Override
        void settingsEvaluated(Settings settings) {
        }

        @Override
        void projectsLoaded(Gradle gradle) {}

        @Override
        void projectsEvaluated(Gradle gradle) {
            File stringFile = new File("${projectDir}/src/main/res/values/strings.xml")
//            stringFile.write(stringFile.getText('UTF-8').replace("", ""), 'UTF-8')
//            gradle.getGradleVersion()
        }

        @Override
        void buildFinished(BuildResult result) {
            File stringFile = new File("${projectDir}/src/main/res/values/strings.xml")
//            stringFile.write(stringFile.getText('UTF-8').replace("", ""), 'UTF-8')
            new File("${projectDir}/src/main/assets/outted").createNewFile()
//            result.rethrowFailure().
        }
    })

    gradle.afterProject { project ->
        if (project.state.failure) {
            println "Evaluation of $project FAILED"
        } else {
            println "Evaluation of $project succeeded"
        }
    }
}

dependencies {

    // Dependency on local binaries
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.7.0-beta01'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.5.1'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // testing libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Glide - load images from internet
    implementation "com.github.bumptech.glide:glide:4.13.2"
    annotationProcessor "com.github.bumptech.glide:compiler:4.13.2"

    // Tapsell Sdk
    implementation 'ir.tapsell.plus:tapsell-plus-sdk-android:2.1.6'

    // multi dex
    implementation 'androidx.multidex:multidex:2.0.1'

    // Optional - to use ShortcutManagerCompat to donate shortcuts to be used by Google
    implementation "androidx.core:core-google-shortcuts:1.0.1"

    // splashscreen by google
    implementation 'androidx.core:core-splashscreen:1.0.0'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:29.0.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-messaging'

    // for request to server
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.4'
    implementation 'com.android.volley:volley:1.2.1'

    // material menu
    implementation 'com.balysv.materialmenu:material-menu:2.0.0'

    implementation 'com.google.android.gms:play-services-auth:20.2.0'


    // new implements
    implementation 'androidx.palette:palette:1.0.0'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'io.github.yanndroid:oneui:2.3.0'
}

task versionName {
    doLast {
        print android.defaultConfig.versionName
    }
}

static def validateVersionName(String versionName) {
    if (!Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '" + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}

andResGuard {
    mappingFile = file("./resource_mapping.txt")
    use7zip = true
    useSign = true
    keepRoot = false
    mergeDuplicatedRes = true

    whiteList = ["io.blockify.R.mipmap.ic_launcher", "ir.blockify.R.string.com.crashlytics.*", "ir.blockify.R.id.*"]

    compressFilePattern = ["*.png", "*.jpg", "*.jpeg", "*.gif", "resources.arsc"]

    finalApkBackupPath = "${project.rootDir}/final.apk"
    digestalg = "SHA-256"
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'de.dlyt.yanndroid.oneui', module: 'one-ui'
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

