import java.util.regex.Pattern

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk Versions.compileSdkVersion
    buildToolsVersion Versions.buildToolsVersion
    ndkVersion Versions.ndkVersion

    defaultConfig {
        applicationId "ir.blockify"
        minSdk Versions.minSdkVersion
        targetSdk Versions.targetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName + "-" + System.currentTimeMillis()

        multiDexEnabled true

        vectorDrawables {
            useSupportLibrary true
        }

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        validateVersionName(versionName)

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                version Versions.cmakeVersion
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-16', "-j=16"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            jniDebuggable true
            multiDexEnabled true
            debuggable true

            ndk.debugSymbolLevel = 'FULL'

            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }

        debug {
            debuggable true
            jniDebuggable true
//            signingConfig true
            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            ndk.debugSymbolLevel = 'FULL'

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
//        coreLibraryDesugaringEnabled true
    }

    sourceSets.main.jniLibs.srcDirs = ['./jni/']

//    externalNativeBuild {
//        cmake {
//            path 'jni/CMakeLists.txt'
//        }
//    }

    dexOptions {
        jumboMode = true
    }

    lint {
        abortOnError false
        disable 'VectorPath', 'NestedWeights', 'ContentDescription', 'SmallSp'
    }

    lintOptions {
        checkReleaseBuilds false
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }

        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '26'
        }
    }

    kotlinOptions {
        jvmTarget = jvmTarget
    }

    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion Versions.compose_version
    }

    dependenciesInfo {
        includeInApk true
        includeInBundle true
    }

    androidResources {
        additionalParameters.add("--warn-manifest-validation")
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
        jniLibs {
            useLegacyPackaging = true
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)

            if (variant.buildType.name == "debug")
                outputFileName = new File("blockify_debug_" + (abi ? abi : "universal") + ".apk")

            else if (variant.buildType.name == "release")
                outputFileName = new File("blockify_release_" + (abi ? abi : "universal") + ".apk")

        }
    }
}

dependencies {

    // Dependency on local binaries
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // default libraris
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'com.google.android.material:material:1.7.0-beta01'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'


    // compos
    implementation "androidx.compose.ui:ui:" + Versions.compose_version
    implementation 'androidx.compose.material3:material3:1.0.0-beta01'
    implementation "androidx.compose.ui:ui-tooling-preview:" + Versions.compose_version
    implementation 'androidx.activity:activity-compose:1.5.1'

    // multi dex
    implementation 'androidx.multidex:multidex:2.0.1'

    // for materialYou
    implementation 'androidx.palette:palette:1.0.0'

    // testing libraries
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:" + Versions.compose_version

    // debug libraries
    debugImplementation "androidx.compose.ui:ui-tooling:" + Versions.compose_version
    debugImplementation "androidx.compose.ui:ui-test-manifest:" + Versions.compose_version
}

static def validateVersionName(String versionName) {
    if (!Pattern.matches("^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?\$", versionName))
        throw new GradleException("The versionName '" + versionName + "' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html.")
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.all {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

